{
  "name": "safe-regex",
  "version": "0.0.1",
  "description": "detect possibly catastrophic, exponential-time regular expressions",
  "main": "index.js",
  "dependencies": {
    "ret": "~0.1.6"
  },
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8",
      "ie/9",
      "ie/10",
      "firefox/latest",
      "chrome/latest",
      "opera/latest",
      "safari/latest"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/safe-regex.git"
  },
  "homepage": "https://github.com/substack/safe-regex",
  "keywords": [
    "catastrophic",
    "exponential",
    "regex",
    "safe",
    "sandbox"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# safe-regex\n\ndetect potentially\n[catastrophic](http://regular-expressions.mobi/catastrophic.html)\n[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)\nregular expressions by limiting the\n[star height](https://en.wikipedia.org/wiki/Star_height) to 1\n\nWARNING: This module merely *seems* to work given all the catastrophic regular\nexpressions I could find scouring the internet, but I don't have enough of a\nbackground in automata to be absolutely sure that this module will catch all\nexponential-time cases.\n\n[![browser support](https://ci.testling.com/substack/safe-regex.png)](https://ci.testling.com/substack/safe-regex)\n\n[![build status](https://secure.travis-ci.org/substack/safe-regex.png)](http://travis-ci.org/substack/safe-regex)\n\n# example\n\n``` js\nvar safe = require('safe-regex');\nvar regex = process.argv.slice(2).join(' ');\nconsole.log(safe(regex));\n```\n\n```\n$ node safe.js '(x+x+)+y'\nfalse\n$ node safe.js '(beep|boop)*'\ntrue\n$ node safe.js '(a+){10}'\nfalse\n$ node safe.js '\\blocation\\s*:[^:\\n]+\\b(Oakland|San Francisco)\\b'\ntrue\n```\n\n# methods\n\n``` js\nvar safe = require('safe-regex')\n```\n\n## var ok = safe(re)\n\nReturn a boolean `ok` whether or not the regex `re` is safe and not possibly\ncatastrophic.\n\n`re` can be a `RegExp` object or just a string.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install safe-regex\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/safe-regex/issues"
  },
  "_id": "safe-regex@0.0.1",
  "dist": {
    "shasum": "350ae32b49b7dc75d1cac3a18cb8b375a94ef15c",
    "tarball": "http://registry.npmjs.org/safe-regex/-/safe-regex-0.0.1.tgz"
  },
  "_from": "safe-regex@*",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "substack",
    "email": "mail@substack.net"
  },
  "maintainers": [
    {
      "name": "substack",
      "email": "mail@substack.net"
    }
  ],
  "directories": {},
  "_shasum": "350ae32b49b7dc75d1cac3a18cb8b375a94ef15c",
  "_resolved": "https://registry.npmjs.org/safe-regex/-/safe-regex-0.0.1.tgz"
}
